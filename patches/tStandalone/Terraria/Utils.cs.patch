--- src/tModLoader/Terraria/Utils.cs
+++ src/tStandalone/Terraria/Utils.cs
@@ -1,4 +_,5 @@
 using Microsoft.Xna.Framework;
+using Microsoft.Xna.Framework.Content;
 using Microsoft.Xna.Framework.Graphics;
 using Microsoft.Xna.Framework.Graphics.PackedVector;
 using Microsoft.Xna.Framework.Input;
@@ -22,7 +_,7 @@
 
 namespace Terraria
 {
-	public static partial class Utils
+	public static class Utils
 	{
 		public delegate bool TileActionAttempt(int x, int y);
 
@@ -251,12 +_,6 @@
 								num2 -= 16;
 
 							int num3 = Math.Min(list3[l].Text.Length, num2 / 8);
-							for (int i = 0; i < list3[l].Text.Length; i++) {
-								// TODO: hypen?, more efficient, binary search?, use ChatManager.GetStringSize to support other tags better.
-								if (font.MeasureString(list3[l].Text.Substring(0, i)).X * list3[l].Scale < num2)
-									num3 = i;
-							}
-
 							if (num3 < 0)
 								num3 = 0;
 
@@ -264,8 +_,7 @@
 							int num4 = num3;
 							if (array3.Length > 1) {
 								num4 = 0;
-								// `num4 == 0 ||` solves the longworld + small word problem.
-								for (int m = 0; num4 == 0 || m < array3.Length && num4 + array3[m].Length <= num3; m++) {
+								for (int m = 0; m < array3.Length && num4 + array3[m].Length <= num3; m++) {
 									num4 += array3[m].Length + 1;
 								}
 
@@ -1127,17 +_,14 @@
 				text.Substring(0, maxCharactersDisplayed);
 
 			DynamicSpriteFont value = FontAssets.DeathText.Value;
-			/*
 			for (int i = -1; i < 2; i++) {
 				for (int j = -1; j < 2; j++) {
-					spriteBatch.DrawString(value, text, pos + new Vector2((float)i, (float)j), Color.Black, 0f, new Vector2(anchorx, anchory) * value.MeasureString(text), scale, SpriteEffects.None, 0f);
+					spriteBatch.DrawString(value, text, pos + new Vector2(i, j), Color.Black, 0f, new Vector2(anchorx, anchory) * value.MeasureString(text), scale, SpriteEffects.None, 0f);
 				}
 			}
+
 			spriteBatch.DrawString(value, text, pos, color, 0f, new Vector2(anchorx, anchory) * value.MeasureString(text), scale, SpriteEffects.None, 0f);
-			*/
-			Vector2 vector = ChatManager.GetStringSize(value, text, Vector2.One);
-			ChatManager.DrawColorCodedStringWithShadow(spriteBatch, value, text, pos, color, 0f, new Vector2(anchorx, anchory) * vector, new Vector2(scale), -1f, 2f);
-			return vector * scale;
+			return value.MeasureString(text) * scale;
 		}
 
 		public static void DrawInvBG(SpriteBatch sb, Rectangle R, Color c = default(Color)) {
@@ -1348,6 +_,27 @@
 
 			if (flag3)
 				sb.Draw(TextureAssets.Cursors[cursorSlot].Value, value + value2, null, color, rot, origin, scale, SpriteEffects.None, 0f);
+		}
+
+        public static Texture2D GetPNGFromStream(this ContentManager contentManager, string path) {
+			if (string.IsNullOrEmpty(path)) throw new ArgumentException("Path was null or empty");
+
+			Stream stream = null;
+
+			try {
+				stream = TitleContainer.OpenStream(Path.Combine(contentManager.RootDirectory, path) + ".png");
+			}
+			catch (FileNotFoundException fileNotFound) {
+				throw new ContentLoadException("The specified file was not found.", fileNotFound);
+			}
+			catch (Exception e) {
+				throw new ContentLoadException("An error occured while opening stream.", e);
+			}
+
+			return Texture2D.FromStream(
+				Main.instance.GraphicsDevice,
+				stream
+				);
 		}
 	}
 }
