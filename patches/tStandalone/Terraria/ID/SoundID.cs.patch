--- src/tModLoader/Terraria/ID/SoundID.cs
+++ src/tStandalone/Terraria/ID/SoundID.cs
@@ -7,7 +_,7 @@
 {
 	public class SoundID
 	{
-		public struct SoundStyleDefaults
+		private struct SoundStyleDefaults
 		{
 			public readonly float PitchVariance;
 			public readonly float Volume;
@@ -209,8 +_,9 @@
 		public static readonly LegacySoundStyle NPCDeath63 = new LegacySoundStyle(4, 63);
 		public static readonly LegacySoundStyle NPCDeath64 = new LegacySoundStyle(4, 64);
 		public static readonly LegacySoundStyle NPCDeath65 = new LegacySoundStyle(4, 65);
-		public static short NPCHitCount = 58; //Added by tML
 		public static short NPCDeathCount = 66;
+		public static short VanillaNPCDeathCount = 66;
+		//TODO: Count
 		public static readonly LegacySoundStyle Item1 = new LegacySoundStyle(2, 1);
 		public static readonly LegacySoundStyle Item2 = new LegacySoundStyle(2, 2);
 		public static readonly LegacySoundStyle Item3 = new LegacySoundStyle(2, 3);
@@ -384,6 +_,8 @@
 		public static readonly LegacySoundStyle Item171 = new LegacySoundStyle(2, 171);
 		public static readonly LegacySoundStyle Item172 = new LegacySoundStyle(2, 172);
 		public static short ItemSoundCount = 173;
+		public static short VanillaItemSoundCount = 173;
+		//TODO: Count
 		public static readonly LegacySoundStyle DD2_GoblinBomb = new LegacySoundStyle(2, 14).WithVolume(0.5f);
 		public static readonly LegacySoundStyle AchievementComplete = CreateTrackable("achievement_complete");
 		public static readonly LegacySoundStyle BlizzardInsideBuildingLoop = CreateTrackable("blizzard_inside_building_loop", SoundType.Ambient);
@@ -482,13 +_,14 @@
 		public static Dictionary<ushort, LegacySoundStyle> SoundByIndex = null;
 
 		public static int TrackableLegacySoundCount => _trackableLegacySoundPathList.Count;
+		// TODO: count blah blah blah
 
 		public static string GetTrackableLegacySoundPath(int id) => _trackableLegacySoundPathList[id];
-		public static LegacySoundStyle CreateTrackable(string name, SoundStyleDefaults defaults) => CreateTrackable(name, 1, defaults.Type).WithPitchVariance(defaults.PitchVariance).WithVolume(defaults.Volume);
+		private static LegacySoundStyle CreateTrackable(string name, SoundStyleDefaults defaults) => CreateTrackable(name, 1, defaults.Type).WithPitchVariance(defaults.PitchVariance).WithVolume(defaults.Volume);
-		public static LegacySoundStyle CreateTrackable(string name, int variations, SoundStyleDefaults defaults) => CreateTrackable(name, variations, defaults.Type).WithPitchVariance(defaults.PitchVariance).WithVolume(defaults.Volume);
+		private static LegacySoundStyle CreateTrackable(string name, int variations, SoundStyleDefaults defaults) => CreateTrackable(name, variations, defaults.Type).WithPitchVariance(defaults.PitchVariance).WithVolume(defaults.Volume);
-		public static LegacySoundStyle CreateTrackable(string name, SoundType type = SoundType.Sound) => CreateTrackable(name, 1, type);
+		private static LegacySoundStyle CreateTrackable(string name, SoundType type = SoundType.Sound) => CreateTrackable(name, 1, type);
 
-		public static LegacySoundStyle CreateTrackable(string name, int variations, SoundType type = SoundType.Sound) {
+		private static LegacySoundStyle CreateTrackable(string name, int variations, SoundType type = SoundType.Sound) {
 			if (_trackableLegacySoundPathList == null)
 				_trackableLegacySoundPathList = new List<string>();
 
