--- src/tModLoader/Terraria/ID/ItemID.cs
+++ src/tStandalone/Terraria/ID/ItemID.cs
@@ -1,9 +_,7 @@
 using Microsoft.Xna.Framework;
 using ReLogic.Reflection;
-using System;
 using System.Collections.Generic;
 using Terraria.DataStructures;
-using Terraria.ModLoader;
 
 namespace Terraria.ID
 {
@@ -37,7 +_,7 @@
 
 		public class Sets
 		{
-			public static SetFactory Factory = new SetFactory(ItemLoader.ItemCount);
+			public static SetFactory Factory = new SetFactory(ItemID.Count);
 			public static List<int> ItemsThatAreProcessedAfterNormalContentSample = new List<int> {
 				1533,
 				1534,
@@ -852,13 +_,12 @@
 			public static bool[] CanBePlacedOnWeaponRacks = Factory.CreateBoolSet(3196, 166, 235, 3115, 167, 2896, 3547, 580, 937, 4423, 4824, 4825, 4908, 4909, 4094, 4039, 4092, 4093, 4587, 4588, 4589, 4590, 4591, 4592, 4593, 4594, 4595, 4596, 4597, 4598, 905, 1326, 3225, 2303, 2299, 2290, 2317, 2305, 2304, 2313, 2318, 2312, 2306, 2308, 2319, 2314, 2302, 2315, 2307, 2310, 2301, 2298, 2316, 2309, 2321, 2297, 2300, 2311, 2420, 2438, 2437, 2436, 4401, 4402, 2475, 2476, 2450, 2477, 2478, 2451, 2479, 2480, 2452, 2453, 2481, 2454, 2482, 2483, 2455, 2456, 2457, 2458, 2459, 2460, 2484, 2472, 2461, 2462, 2463, 2485, 2464, 2465, 2486, 2466, 2467, 2468, 2487, 2469, 2488, 2470, 2471, 2473, 2474, 4393, 4394);
 			public static int[] TextureCopyLoad = Factory.CreateIntSet(-1, 3665, 48, 3666, 306, 3667, 328, 3668, 625, 3669, 626, 3670, 627, 3671, 680, 3672, 681, 3673, 831, 3674, 838, 3675, 914, 3676, 952, 3677, 1142, 3678, 1298, 3679, 1528, 3680, 1529, 3681, 1530, 3682, 1531, 3683, 1532, 3684, 2230, 3685, 2249, 3686, 2250, 3687, 2526, 3688, 2544, 3689, 2559, 3690, 2574, 3691, 2612, 3692, 2613, 3693, 2614, 3694, 2615, 3695, 2616, 3696, 2617, 3697, 2618, 3698, 2619, 3699, 2620, 3700, 2748, 3701, 2814, 3703, 3125, 3702, 3180, 3704, 3181, 3705, 3665, 3706, 3665, 4713, 4712);
 			public static bool[] TrapSigned = Factory.CreateBoolSet(false, 3665, 3666, 3667, 3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675, 3676, 3677, 3678, 3679, 3680, 3681, 3682, 3683, 3684, 3685, 3686, 3687, 3688, 3689, 3690, 3691, 3692, 3693, 3694, 3695, 3696, 3697, 3698, 3699, 3700, 3701, 3703, 3702, 3704, 3705, 3706, 3886, 3887, 3950, 3976, 4164, 4185, 4206, 4227, 4266, 4268, 4585, 4713);
-			public static bool[] Deprecated = Factory.CreateBoolSet(2783, 2785, 2782, 2773, 2775, 2772, 2778, 2780, 2777, 3463, 3465, 3462, 2881, 3847, 3848, 3849, 3850, 3851, 3850, 3861, 3862, 4010, 4058, 5013, 4722, 3978);
+			public static bool[] Deprecated = Factory.CreateBoolSet(2783, 2785, 2782, 2773, 2775, 2772, 2778, 2780, 2777, 3463, 3465, 3462, 2881, 3847, 3848, 3849, 3850, 3851, 3850, 3861, 3862, 4010, 4058, 5013, 3978);
 			public static bool[] NeverAppearsAsNewInInventory = Factory.CreateBoolSet(71, 72, 73, 74);
 			public static bool[] CommonCoin = Factory.CreateBoolSet(71, 72, 73, 74);
 			public static bool[] ItemIconPulse = Factory.CreateBoolSet(520, 521, 575, 549, 548, 547, 3456, 3457, 3458, 3459, 3580, 3581);
 			public static bool[] ItemNoGravity = Factory.CreateBoolSet(520, 521, 575, 549, 548, 547, 3453, 3454, 3455, 3456, 3457, 3458, 3459, 3580, 3581, 4143);
-			// Paired with a change in Player.ExtractinatorUse, non default extractType goes by itemId so DesertFossil is 3347 rather than 1 now
-			public static int[] ExtractinatorMode = Factory.CreateIntSet(-1, 424, 0, 1103, 0, 3347, 3347);
+			public static int[] ExtractinatorMode = Factory.CreateIntSet(-1, 424, 0, 1103, 0, 3347, 1);
 			public static int[] StaffMinionSlotsRequired = Factory.CreateIntSet(1);
 			public static bool[] ExoticPlantsForDyeTrade = Factory.CreateBoolSet(3385, 3386, 3387, 3388);
 			public static bool[] NebulaPickup = Factory.CreateBoolSet(3453, 3454, 3455);
@@ -894,7 +_,6 @@
 			public static bool[] SingleUseInGamepad = Factory.CreateBoolSet(8, 427, 3004, 523, 433, 429, 974, 1333, 1245, 3114, 430, 3045, 428, 2274, 431, 432, 4383, 4384, 4385, 4386, 4387, 4388);
 			public static bool[] Torches = Factory.CreateBoolSet(8, 427, 3004, 523, 433, 429, 974, 1333, 1245, 3114, 430, 3045, 428, 2274, 431, 432, 4383, 4384, 4385, 4386, 4387, 4388);
 			public static bool[] WaterTorches = Factory.CreateBoolSet(523, 1333, 4384);
-			public static bool[] Glowsticks = Factory.CreateBoolSet(282, 286, 3002, 3112, 4776);
 			public static short[] Workbenches = new short[41] {
 				36,
 				635,
@@ -6036,6 +_,7 @@
 		public const short TorchGodsFavor = 5043;
 		public const short MusicBoxCredits = 5044;
 		public const short Count = 5045;
+		public const short VanillaCount = 5045;
 
 		private static Dictionary<string, short> GenerateLegacyItemDictionary() {
 			return new Dictionary<string, short> {
@@ -6848,37 +_,6 @@
 				return value;
 
 			return 0;
-		}
-
-		public static string GetUniqueKey(int type) {
-			if (type < 0 || type >= ItemLoader.ItemCount)
-				throw new ArgumentOutOfRangeException("Invalid type: " + type);
-
-			if (type < Count)
-				return "Terraria " + Search.GetName(type);
-
-			var modItem = ItemLoader.GetItem(type);
-			return $"{modItem.mod.Name} {modItem.Name}";
-		}
-
-		public static string GetUniqueKey(Item item) => GetUniqueKey(item.type);
-
-		public static int TypeFromUniqueKey(string key) {
-			string[] parts = key.Split(new char[] { ' ' }, 2);
-			if (parts.Length != 2)
-				return 0;
-
-			return TypeFromUniqueKey(parts[0], parts[1]);
-		}
-		public static int TypeFromUniqueKey(string mod, string name) {
-			if (mod == "Terraria") {
-				if (!Search.ContainsName(name))
-					return 0;
-
-				return Search.GetId(name);
-			}
-
-			return ModLoader.ModLoader.GetMod(mod)?.ItemType(name) ?? 0;
 		}
 	}
 }
