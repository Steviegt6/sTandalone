--- src/Terraria/Terraria/Main.cs
+++ src/tModLoader/Terraria/Main.cs
@@ -69,6 +_,7 @@
 using Terraria.Net;
 using Terraria.ObjectData;
 using Terraria.Social;
+using Terraria.tStandalone;
 using Terraria.UI;
 using Terraria.UI.Chat;
 using Terraria.UI.Gamepad;
@@ -175,6 +_,34 @@
 			public bool LanternNightActive;
 		}
 
+		//tStandalone VARIABLES
+		#region tStandalone
+		public static string tStandaloneVersion = "v1.0.0.0";
+
+		public static bool _showWelcomeMessage = true;
+		public static bool restartRequired = false;
+		public static bool terrariaPlus = false;
+		public static bool masterModeReloaded = false;
+
+		public static int YellowtoWhiteDir = 1;
+
+		public static float YellowtoWhite = 1f;
+
+		public enum Mod
+		{
+			TerrariaPlus,
+			MasterModeReloaded
+		}
+
+		public static List<Mod> enabledMods = new List<Mod>();
+
+		#region TERRARIA_PLUS
+		public static bool firstFractalRecipe = false;
+		public static bool slowerMasterModeRarity = false;
+		public static bool allAccessoriesInVanitySlots = false;
+		#endregion TERRARIA_PLUS
+		#endregion tStandalone
+
 		private const string versionStringBecauseTheyreTheSame = "v1.4.0.5";
 		public const int curRelease = 230;
 		public const string assemblyVersionNumber = "1.4.0.5";
@@ -279,6 +_,9 @@
 		public static ulong TileFrameSeed = (ulong)Guid.NewGuid().GetHashCode();
 		private static ulong _drawCycleCounter;
 		public static ContentManager ShaderContentManager;
+		#region Modded Shaders
+		public static Ref<Effect> VerticalMirrorRef = new Ref<Effect>();
+		#endregion
 		public static Ref<Effect> ScreenShaderRef = new Ref<Effect>();
 		public static Ref<Effect> PixelShaderRef = new Ref<Effect>();
 		public static Ref<Effect> TileShaderRef = new Ref<Effect>();
@@ -294,11 +_,11 @@
 		public static bool superFast = false;
 		public const int offLimitBorderTiles = 40;
 		public const int maxItemTypes = 5045;
-		public const int maxProjectileTypes = 950;
+		public const int maxProjectileTypes = ProjectileID.Count;
 		public const int maxNPCTypes = 663;
 		public const int maxTileSets = 623;
 		public const int maxWallTypes = 316;
-		public const int maxBuffTypes = 323;
+		public const int maxBuffTypes = BuffID.Count;
 		public const int maxGlowMasks = 301;
 		public const int maxExtras = 212;
 		public const int maxGoreTypes = 1269;
@@ -516,17 +_,17 @@
 		public static int buffScanAreaWidth = (maxScreenW + 800) / 16 - 1;
 		public static int buffScanAreaHeight = (maxScreenH + 800) / 16 - 1;
 		public static float musicPitch = 0f;
-		public static bool[] projHostile = new bool[950];
+		public static bool[] projHostile = new bool[ProjectileID.Count];
-		public static bool[] projHook = new bool[950];
+		public static bool[] projHook = new bool[ProjectileID.Count];
-		public static bool[] pvpBuff = new bool[323];
+		public static bool[] pvpBuff = new bool[BuffID.Count];
-		public static bool[] persistentBuff = new bool[323];
+		public static bool[] persistentBuff = new bool[BuffID.Count];
-		public static bool[] vanityPet = new bool[323];
+		public static bool[] vanityPet = new bool[BuffID.Count];
-		public static bool[] lightPet = new bool[323];
+		public static bool[] lightPet = new bool[BuffID.Count];
-		public static bool[] meleeBuff = new bool[323];
+		public static bool[] meleeBuff = new bool[BuffID.Count];
-		public static bool[] debuff = new bool[323];
+		public static bool[] debuff = new bool[BuffID.Count];
-		public static bool[] buffNoSave = new bool[323];
+		public static bool[] buffNoSave = new bool[BuffID.Count];
-		public static bool[] buffNoTimeDisplay = new bool[323];
+		public static bool[] buffNoTimeDisplay = new bool[BuffID.Count];
-		public static bool[] buffDoubleApply = new bool[323];
+		public static bool[] buffDoubleApply = new bool[BuffID.Count];
 		public static int maxMP = 10;
 		public static string[] recentWorld = new string[maxMP];
 		public static string[] recentIP = new string[maxMP];
@@ -636,7 +_,7 @@
 		public static bool armorHide;
 		public static float craftingAlpha = 1f;
 		public static float armorAlpha = 1f;
-		public static float[] buffAlpha = new float[323];
+		public static float[] buffAlpha = new float[BuffID.Count];
 		public static bool hardMode;
 		public float chestLootScale = 1f;
 		public bool chestLootHover;
@@ -788,8 +_,8 @@
 		public static int BartenderHelpTextIndex = 0;
 		public static bool autoGen;
 		public static bool autoPause = false;
-		public static int[] projFrames = new int[950];
+		public static int[] projFrames = new int[ProjectileID.Count];
-		public static bool[] projPet = new bool[950];
+		public static bool[] projPet = new bool[ProjectileID.Count];
 		public static float demonTorch = 1f;
 		public static int demonTorchDir = 1;
 		public static float martianLight = 1f;
@@ -1152,10 +_,10 @@
 		public static Player PendingPlayer = null;
 		public static List<WorldFileData> WorldList = new List<WorldFileData>();
 		public static WorldFileData ActiveWorldFileData = new WorldFileData();
-		public static string WorldPath = Path.Combine(SavePath, "Worlds");
+		public static string WorldPath = Path.Combine(SavePath, "tStandalone\\Worlds");
-		public static string CloudWorldPath = "worlds";
+		public static string CloudWorldPath = "tstandalone\\worlds";
 		public static string PlayerPath = Path.Combine(SavePath, "Players");
-		public static string CloudPlayerPath = "players";
+		public static string CloudPlayerPath = "tstandalone\\players";
 		public static Preferences Configuration = new Preferences(SavePath + Path.DirectorySeparatorChar + "config.json");
 		public static Preferences InputProfiles = new Preferences(SavePath + Path.DirectorySeparatorChar + "input profiles.json");
 		public static KeyboardState inputText;
@@ -3031,6 +_,7 @@
 
 		public static bool SaveSettings() {
 			Configuration.Clear();
+			sMain.tStandalonePut();
 			Configuration.Put("ResetDefaultUIScale", false);
 			Configuration.Put("SmartCursorToggle", cSmartCursorModeIsToggleAndNotHold);
 			Configuration.Put("MapEnabled", mapEnabled);
@@ -3150,6 +_,8 @@
 			if (currentValue < 219)
 				flag = true;
 
+			sMain.tStandaloneGet();
+
 			if (!flag) {
 				Configuration.Get("ResetDefaultUIScale", ref shouldSetDefaultUIScale);
 				Configuration.Get("Fullscreen", ref startFullscreen);
@@ -3159,7 +_,7 @@
 
 			PendingBorderlessState = screenBorderless;
 			screenBorderlessPendingResizes = (screenBorderless ? 6 : 0);
-			if (!startFullscreen) {
+			if (!startFullscreen && !dedServ) {
 				int currentValue2 = graphics.PreferredBackBufferWidth;
 				int currentValue3 = graphics.PreferredBackBufferHeight;
 				Configuration.Get("DisplayWidth", ref currentValue2);
@@ -3315,7 +_,7 @@
 			if (Enum.TryParse(Configuration.Get("FlashIconForEvents", "All"), out GameNotificationType result3))
 				_flashNotificationType = result3;
 
-			if (!flag) {
+			if (!flag && !dedServ) {
 				string screenDeviceName = Configuration.Get("DisplayScreen", "");
 				_windowMover.TryMovingToScreen(screenDeviceName);
 				bool flag2 = Configuration.Get("ThrottleWhenInactive", defaultValue: true);
@@ -4370,6 +_,7 @@
 			double num7 = 0.0;
 			int num8 = 0;
 			new Stopwatch().Start();
+			LoadSettings();
 			Netplay.StartServer();
 			gameMenu = false;
 			while (!Netplay.Disconnect) {
@@ -4860,6 +_,7 @@
 			TileEntity.InitializeAll();
 			Projectile.InitializeStaticThings();
 			TorchID.Initialize();
+			FinalFractalHelper.InitializeCustomFinalFractalProfiles();
 			InitializeItemAnimations();
 			BestiaryDatabase bestiaryDatabase = new BestiaryDatabase();
 			new BestiaryDatabaseNPCsPopulator().Populate(bestiaryDatabase);
@@ -4927,7 +_,7 @@
 			teamColor[3] = new Microsoft.Xna.Framework.Color(59, 149, 218);
 			teamColor[4] = new Microsoft.Xna.Framework.Color(242, 221, 100);
 			teamColor[5] = new Microsoft.Xna.Framework.Color(224, 100, 242);
-			for (int m = 1; m < 950; m++) {
+			for (int m = 1; m < ProjectileID.Count; m++) {
 				Projectile obj = new Projectile();
 				obj.SetDefaults(m);
 				if (obj.hostile)
@@ -4969,6 +_,130 @@
 			Star.SpawnStars();
 			ItemSorting.SetupWhiteLists();
 #endif
+		}
+
+		private void Reinitialize_AlmostEverything_Needed() {
+			TilePaintSystem = new TilePaintSystemV2();
+			TilesRenderer = new TileDrawing(TilePaintSystem);
+			WallsRenderer = new WallDrawing(TilePaintSystem);
+			CreativePowerManager.Initialize();
+			LocalFavoriteData.Load();
+			CloudFavoritesData.Load();
+			Initialize_Entities();
+			FindAnnouncementBoxStatus();
+			CustomCurrencyManager.Initialize();
+			WingStatsInitializer.Load();
+			//TileObjectData.Initialize();
+			Animation.Initialize();
+			Chest.Initialize();
+			Wiring.Initialize();
+			Framing.Initialize();
+			ItemRarity.Initialize();
+			TileEntity.InitializeAll();
+			Projectile.InitializeStaticThings();
+			TorchID.Initialize();
+			FinalFractalHelper.InitializeCustomFinalFractalProfiles();
+			InitializeItemAnimations();
+			BestiaryDatabase bestiaryDatabase = new BestiaryDatabase();
+			new BestiaryDatabaseNPCsPopulator().Populate(bestiaryDatabase);
+			BestiaryDB = bestiaryDatabase;
+			ContentSamples.RebuildBestiarySortingIDsByBestiaryDatabaseContents(bestiaryDatabase);
+			BestiaryTracker = new BestiaryUnlocksTracker();
+			ItemDropDatabase itemDropDatabase = new ItemDropDatabase();
+			itemDropDatabase.Populate();
+			ItemDropsDB = itemDropDatabase;
+			bestiaryDatabase.Merge(ItemDropsDB);
+			PylonSystem = new TeleportPylonsSystem();
+			ItemDropSolver = new ItemDropResolver(itemDropDatabase);
+			ShopHelper = new ShopHelper();
+			CreativeItemSacrificesCatalog.Instance.Initialize();
+			BestiaryUI = new UIBestiaryTest(BestiaryDB);
+			ContentThatNeedsRenderTargets.Add(MapPlayerRenderer);
+			Lighting.Initialize();
+			MapHelper.Initialize();
+			WorldGen.RandomizeBackgrounds(rand);
+			if (treeBGSet1[0] == 173)
+				WorldGen.RandomizeBackgrounds(rand);
+
+			if (treeBGSet1[0] == 173)
+				WorldGen.RandomizeBackgrounds(rand);
+
+			WorldGen.RandomizeCaveBackgrounds();
+			WorldGen.Hooks.Initialize();
+			WorldGen.Hooks.OnWorldLoad += ResetGameCounter;
+			bgAlphaFrontLayer[0] = 1f;
+			bgAlphaFarBackLayer[0] = 1f;
+			invBottom = 258;
+			Initialize_TileAndNPCData1();
+			Initialize_TileAndNPCData2();
+			Initialize_Items();
+			for (int i = 0; i < Recipe.maxRecipes; i++) {
+				recipe[i] = new Recipe();
+				availableRecipeY[i] = 65 * i;
+			}
+
+			Recipe.SetupRecipes();
+			ContentSamples.FixItemsAfterRecipesAreAdded();
+			for (int j = 0; j < Liquid.maxLiquid; j++) {
+				liquid[j] = new Liquid();
+			}
+
+			for (int k = 0; k < 50000; k++) {
+				liquidBuffer[k] = new LiquidBuffer();
+			}
+
+			shop[0] = new Chest();
+			Chest.SetupTravelShop();
+			for (int l = 1; l < 100; l++) {
+				shop[l] = new Chest();
+				shop[l].SetupShop(l);
+			}
+
+			teamColor[0] = Microsoft.Xna.Framework.Color.White;
+			teamColor[1] = new Microsoft.Xna.Framework.Color(218, 59, 59);
+			teamColor[2] = new Microsoft.Xna.Framework.Color(59, 218, 85);
+			teamColor[3] = new Microsoft.Xna.Framework.Color(59, 149, 218);
+			teamColor[4] = new Microsoft.Xna.Framework.Color(242, 221, 100);
+			teamColor[5] = new Microsoft.Xna.Framework.Color(224, 100, 242);
+			for (int m = 1; m < ProjectileID.Count; m++) {
+				Projectile obj = new Projectile();
+				obj.SetDefaults(m);
+				if (obj.hostile)
+					projHostile[m] = true;
+
+				if (obj.aiStyle == 7)
+					projHook[m] = true;
+			}
+
+			Netplay.Initialize();
+			NetworkInitializer.Load();
+			ChatInitializer.Load();
+			if (menuMode == 1)
+				LoadPlayers();
+
+			if (skipMenu) {
+				WorldGen.clearWorld();
+				gameMenu = false;
+				LoadPlayers();
+				PlayerList[0].SetAsActive();
+				LoadWorlds();
+				WorldGen.GenerateWorld(new UnifiedRandom().Next());
+				WorldGen.EveryTileFrame();
+				player[myPlayer].Spawn(PlayerSpawnContext.SpawningIntoWorld);
+				ActivePlayerFileData.StartPlayTimer();
+				Player.Hooks.EnterWorld(myPlayer);
+			}
+#if WINDOWS
+			else {
+				IntPtr systemMenu = GetSystemMenu(base.Window.Handle, bRevert: false);
+				int menuItemCount = GetMenuItemCount(systemMenu);
+				RemoveMenu(systemMenu, menuItemCount - 1, 1024);
+			}
+#endif
+
+			SoundID.FillAccessMap();
+			Star.SpawnStars();
+			ItemSorting.SetupWhiteLists();
 		}
 
 		private void Initialize_Entities() {
@@ -6424,7 +_,7 @@
 				tileGlowMask[i] = -1;
 			}
 
-			for (int j = 0; j < 950; j++) {
+			for (int j = 0; j < ProjectileID.Count; j++) {
 				projFrames[j] = 1;
 			}
 
@@ -6823,6 +_,7 @@
 			debuff[215] = true;
 			debuff[320] = true;
 			debuff[321] = true;
+			debuff[BuffID.TrueConfusion] = true;
 			pvpBuff[20] = true;
 			pvpBuff[24] = true;
 			pvpBuff[31] = true;
@@ -8178,6 +_,8 @@
 			base.GraphicsDevice.DeviceResetting += GraphicsDeviceLost;
 			if (_needsLanguageSelect)
 				menuMode = 1212;
+			if (!_needsLanguageSelect && _showWelcomeMessage)
+				menuMode = 694201;
 
 			_achievements = new AchievementManager();
 			_achievementAdvisor = new AchievementAdvisor();
@@ -8238,6 +_,9 @@
 			VertexPixelShaderRef.Value = ShaderContentManager.Load<Effect>("PixelShader");
 			TileShaderRef.Value = ShaderContentManager.Load<Effect>("TileShader");
 			ScreenShaderRef.Value = ShaderContentManager.Load<Effect>("ScreenShader");
+			#region Modded Shaders Initialization
+			VerticalMirrorRef.Value = ShaderContentManager.Load<Effect>("VerticalMirror");
+			#endregion
 			spriteBatch = new SpriteBatch(base.GraphicsDevice);
 			tileBatch = new TileBatch(base.GraphicsDevice);
 			DebugDrawer = new BasicDebugDrawer(base.GraphicsDevice);
@@ -13285,7 +_,7 @@
 			if (mouseTextColor <= 190)
 				mouseTextColorChange = 1;
 
-			masterColor += (float)masterColorDir * 0.05f;
+			masterColor += (float)masterColorDir * (slowerMasterModeRarity ? 0.01f : 0.05f);
 			if (masterColor > 1f) {
 				masterColor = 1f;
 				masterColorDir = -1;
@@ -13295,6 +_,17 @@
 				masterColor = 0f;
 				masterColorDir = 1;
 			}
+
+			YellowtoWhite += (float)YellowtoWhiteDir * (dayTime ? 0.05f : 0.01f);
+			if (YellowtoWhite > 1f) {
+				YellowtoWhite = 1f;
+				YellowtoWhiteDir = -1;
+			}
+
+			if (YellowtoWhite < 0f) {
+				YellowtoWhite = 0f;
+				YellowtoWhiteDir = 1;
+			}
 		}
 
 		private static void DoUpdate_AnimateTileGlows() {
@@ -15233,7 +_,7 @@
 					numLines++;
 				}
 
-				if (!item.vanity && item.FitsAccessoryVanitySlot) {
+				if (!item.vanity && item.FitsAccessoryVanitySlot && (!terrariaPlus && !enabledMods.Contains(Mod.TerrariaPlus) && !allAccessoriesInVanitySlots)) {
 					toolTipLine[numLines] = Language.GetText("Misc.CanBePlacedInVanity").Value;
 					numLines++;
 				}
@@ -18509,7 +_,7 @@
 										Microsoft.Xna.Framework.Color alpha11 = rCurrentNPC.GetAlpha(npcColor);
 										float num115 = 1f - (float)rCurrentNPC.life / (float)rCurrentNPC.lifeMax;
 										num115 *= num115;
-										if (getGoodWorld)
+										if (getGoodWorld || (masterModeReloaded && masterMode))
 											num115 = 1f;
 
 										alpha11.R = (byte)((float)(int)alpha11.R * num115);
@@ -18877,7 +_,7 @@
 									else if (type == 389) {
 										mySpriteBatch.Draw(TextureAssets.GlowMask[34].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
 									}
-									else if (type == 4 && rCurrentNPC.ai[1] >= 4f && rCurrentNPC.ai[0] == 3f) {
+									else if (type == 4 && ((rCurrentNPC.ai[1] >= 4f && rCurrentNPC.ai[0] == 3f) || (rCurrentNPC.ai[0] == 5f && rCurrentNPC.ai[1] == 1f))) {
 										for (int num135 = 1; num135 < rCurrentNPC.oldPos.Length; num135++) {
 											_ = ref rCurrentNPC.oldPos[num135];
 											Microsoft.Xna.Framework.Color color35 = npcColor;
@@ -22657,13 +_,49 @@
 				}
 
 				if (projectile.type == 933) {
+					switch (player[myPlayer].name) {
+						case "Stevie": {
+								float t3 = projectile.localAI[0];
+								float scale5 = Utils.GetLerpValue(0f, 20f, t3, clamped: true) * Utils.GetLerpValue(68f, 60f, t3, clamped: true);
+								EntitySpriteDraw(value13, projectile.Center + zero - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle3, new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * projectile.Opacity * scale5, rotation23, origin4, num169 * 1.25f, spriteEffects, 0);
+								FinalFractalHelper.FinalFractalProfile finalFractalProfileFunny = FinalFractalHelper.GetFinalFractalProfileFunny((int)projectile.ai[1]);
+								Microsoft.Xna.Framework.Color trailColor = finalFractalProfileFunny.trailColor;
+								trailColor.A /= 2;
+								DrawPrettyStarSparkle(projectile, spriteEffects, projectile.Center + zero - screenPosition + new Vector2(0f, projectile.gfxOffY) + (projectile.rotation - (float)Math.PI / 2f).ToRotationVector2() * finalFractalProfileFunny.trailWidth, Microsoft.Xna.Framework.Color.White * scale5, trailColor * scale5);
+							}
+							break;
+						case "Scalie":
+						case "Terra": {
+								float t3 = projectile.localAI[0];
+								float scale5 = Utils.GetLerpValue(0f, 20f, t3, clamped: true) * Utils.GetLerpValue(68f, 60f, t3, clamped: true);
+								EntitySpriteDraw(value13, projectile.Center + zero - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle3, new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * projectile.Opacity * scale5, rotation23, origin4, num169 * 1.25f, spriteEffects, 0);
+								FinalFractalHelper.FinalFractalProfile finalFractalProfileTerra = FinalFractalHelper.GetFinalFractalProfileTerra((int)projectile.ai[1]);
+								Microsoft.Xna.Framework.Color trailColor = finalFractalProfileTerra.trailColor;
+								trailColor.A /= 2;
+								DrawPrettyStarSparkle(projectile, spriteEffects, projectile.Center + zero - screenPosition + new Vector2(0f, projectile.gfxOffY) + (projectile.rotation - (float)Math.PI / 2f).ToRotationVector2() * finalFractalProfileTerra.trailWidth, Microsoft.Xna.Framework.Color.White * scale5, trailColor * scale5);
+							}
+							break;
+						case "pbone": {
+								float t3 = projectile.localAI[0];
+								float scale5 = Utils.GetLerpValue(0f, 20f, t3, clamped: true) * Utils.GetLerpValue(68f, 60f, t3, clamped: true);
+								EntitySpriteDraw(value13, projectile.Center + zero - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle3, new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * projectile.Opacity * scale5, rotation23, origin4, num169 * 1.25f, spriteEffects, 0);
+								FinalFractalHelper.FinalFractalProfile finalFractalProfileCactus = FinalFractalHelper.GetFinalFractalProfileCactus((int)projectile.ai[1]);
+								Microsoft.Xna.Framework.Color trailColor = finalFractalProfileCactus.trailColor;
+								trailColor.A /= 2;
+								DrawPrettyStarSparkle(projectile, spriteEffects, projectile.Center + zero - screenPosition + new Vector2(0f, projectile.gfxOffY) + (projectile.rotation - (float)Math.PI / 2f).ToRotationVector2() * finalFractalProfileCactus.trailWidth, Microsoft.Xna.Framework.Color.White * scale5, trailColor * scale5);
+							}
+							break;
+						default: {
-					float t3 = projectile.localAI[0];
+								float t3 = projectile.localAI[0];
-					float scale5 = Utils.GetLerpValue(0f, 20f, t3, clamped: true) * Utils.GetLerpValue(68f, 60f, t3, clamped: true);
+								float scale5 = Utils.GetLerpValue(0f, 20f, t3, clamped: true) * Utils.GetLerpValue(68f, 60f, t3, clamped: true);
-					EntitySpriteDraw(value13, projectile.Center + zero - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle3, new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * projectile.Opacity * scale5, rotation23, origin4, num169 * 1.25f, spriteEffects, 0);
+								EntitySpriteDraw(value13, projectile.Center + zero - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle3, new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * projectile.Opacity * scale5, rotation23, origin4, num169 * 1.25f, spriteEffects, 0);
-					FinalFractalHelper.FinalFractalProfile finalFractalProfile = FinalFractalHelper.GetFinalFractalProfile((int)projectile.ai[1]);
+								FinalFractalHelper.FinalFractalProfile finalFractalProfile = FinalFractalHelper.GetFinalFractalProfile((int)projectile.ai[1]);
-					Microsoft.Xna.Framework.Color trailColor = finalFractalProfile.trailColor;
+								Microsoft.Xna.Framework.Color trailColor = finalFractalProfile.trailColor;
-					trailColor.A /= 2;
+								trailColor.A /= 2;
-					DrawPrettyStarSparkle(projectile, spriteEffects, projectile.Center + zero - screenPosition + new Vector2(0f, projectile.gfxOffY) + (projectile.rotation - (float)Math.PI / 2f).ToRotationVector2() * finalFractalProfile.trailWidth, Microsoft.Xna.Framework.Color.White * scale5, trailColor * scale5);
+								DrawPrettyStarSparkle(projectile, spriteEffects, projectile.Center + zero - screenPosition + new Vector2(0f, projectile.gfxOffY) + (projectile.rotation - (float)Math.PI / 2f).ToRotationVector2() * finalFractalProfile.trailWidth, Microsoft.Xna.Framework.Color.White * scale5, trailColor * scale5);
+							}
+							break;
+					}
 				}
 			}
 			else if (projectile.type == 672) {
@@ -31723,13 +_,13 @@
 				return drawBuffText;
 
 			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(buffAlpha[buffSlotOnPlayer], buffAlpha[buffSlotOnPlayer], buffAlpha[buffSlotOnPlayer], buffAlpha[buffSlotOnPlayer]);
-			spriteBatch.Draw(TextureAssets.Buff[num].Value, new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Buff[num].Width(), TextureAssets.Buff[num].Height()), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+			spriteBatch.Draw(TextureAssets.Buff[num].Value, new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Buff[num].Value.Width, TextureAssets.Buff[num].Value.Height), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 			if (TryGetBuffTime(buffSlotOnPlayer, out int buffTimeValue) && buffTimeValue > 2) {
 				string text = Lang.LocalizedDuration(new TimeSpan(0, 0, buffTimeValue / 60), abbreviated: true, showAllAvailableUnits: false);
-				spriteBatch.DrawString(FontAssets.ItemStack.Value, text, new Vector2(x, y + TextureAssets.Buff[num].Height()), color, 0f, default(Vector2), 0.8f, SpriteEffects.None, 0f);
+				spriteBatch.DrawString(FontAssets.ItemStack.Value, text, new Vector2(x, y + TextureAssets.Buff[num].Value.Height), color, 0f, default(Vector2), 0.8f, SpriteEffects.None, 0f);
 			}
 
-			if (mouseX < x + TextureAssets.Buff[num].Width() && mouseY < y + TextureAssets.Buff[num].Height() && mouseX > x && mouseY > y) {
+			if (mouseX < x + TextureAssets.Buff[num].Value.Width && mouseY < y + TextureAssets.Buff[num].Value.Height && mouseX > x && mouseY > y) {
 				drawBuffText = buffSlotOnPlayer;
 				buffAlpha[buffSlotOnPlayer] += 0.1f;
 				bool flag = mouseRight && mouseRightRelease;
@@ -35864,12 +_,24 @@
 			Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color((byte)((float)(int)color.R * ((float)LogoA / 255f)), (byte)((float)(int)color.G * ((float)LogoA / 255f)), (byte)((float)(int)color.B * ((float)LogoA / 255f)), (byte)((float)(int)color.A * ((float)LogoA / 255f)));
 			Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((byte)((float)(int)color.R * ((float)LogoB / 255f)), (byte)((float)(int)color.G * ((float)LogoB / 255f)), (byte)((float)(int)color.B * ((float)LogoB / 255f)), (byte)((float)(int)color.A * ((float)LogoB / 255f)));
 			if (playOldTile) {
+				if (masterModeReloaded) {
+					spriteBatch.Draw(TextureAssets.MMRLogo3.Value, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color2, logoRotation, new Vector2(TextureAssets.Logo.Width() / 2, TextureAssets.Logo.Height() / 2), logoScale, SpriteEffects.None, 0f);
+					spriteBatch.Draw(TextureAssets.MMRLogo4.Value, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color3, logoRotation, new Vector2(TextureAssets.Logo.Width() / 2, TextureAssets.Logo.Height() / 2), logoScale, SpriteEffects.None, 0f);
+				}
+				else {
-				spriteBatch.Draw(TextureAssets.Logo3.Value, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color2, logoRotation, new Vector2(TextureAssets.Logo.Width() / 2, TextureAssets.Logo.Height() / 2), logoScale, SpriteEffects.None, 0f);
+					spriteBatch.Draw(TextureAssets.Logo3.Value, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color2, logoRotation, new Vector2(TextureAssets.Logo.Width() / 2, TextureAssets.Logo.Height() / 2), logoScale, SpriteEffects.None, 0f);
-				spriteBatch.Draw(TextureAssets.Logo4.Value, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color3, logoRotation, new Vector2(TextureAssets.Logo.Width() / 2, TextureAssets.Logo.Height() / 2), logoScale, SpriteEffects.None, 0f);
+					spriteBatch.Draw(TextureAssets.Logo4.Value, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color3, logoRotation, new Vector2(TextureAssets.Logo.Width() / 2, TextureAssets.Logo.Height() / 2), logoScale, SpriteEffects.None, 0f);
+				}
 			}
 			else {
+				if (masterModeReloaded) {
+					spriteBatch.Draw(TextureAssets.MMRLogo.Value, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color2, logoRotation, new Vector2(TextureAssets.Logo.Width() / 2, TextureAssets.Logo.Height() / 2), logoScale, SpriteEffects.None, 0f);
+					spriteBatch.Draw(TextureAssets.MMRLogo2.Value, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color3, logoRotation, new Vector2(TextureAssets.Logo.Width() / 2, TextureAssets.Logo.Height() / 2), logoScale, SpriteEffects.None, 0f);
+				}
+				else {
-				spriteBatch.Draw(TextureAssets.Logo.Value, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color2, logoRotation, new Vector2(TextureAssets.Logo.Width() / 2, TextureAssets.Logo.Height() / 2), logoScale, SpriteEffects.None, 0f);
+					spriteBatch.Draw(TextureAssets.Logo.Value, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color2, logoRotation, new Vector2(TextureAssets.Logo.Width() / 2, TextureAssets.Logo.Height() / 2), logoScale, SpriteEffects.None, 0f);
-				spriteBatch.Draw(TextureAssets.Logo2.Value, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color3, logoRotation, new Vector2(TextureAssets.Logo.Width() / 2, TextureAssets.Logo.Height() / 2), logoScale, SpriteEffects.None, 0f);
+					spriteBatch.Draw(TextureAssets.Logo2.Value, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color3, logoRotation, new Vector2(TextureAssets.Logo.Width() / 2, TextureAssets.Logo.Height() / 2), logoScale, SpriteEffects.None, 0f);
+				}
 			}
 
 			if (dayTime) {
@@ -35964,7 +_,10 @@
 				if (selectedMenu >= 1) {
 					changeTheTitle = true;
 					LanguageManager.Instance.SetLanguage(selectedMenu);
+					if (_showWelcomeMessage)
+						menuMode = 694201;
+					else
-					menuMode = 0;
+						menuMode = 0;
 					SoundEngine.PlaySound(10);
 					SaveSettings();
 				}
@@ -36382,8 +_,8 @@
 				_blockFancyUIWhileLoading = false;
 				_pendingCharacterSelect = null;
 				DD2Event.Ongoing = false;
-				eclipse = false;
-				pumpkinMoon = false;
+				eclipse = masterModeReloaded ? true : false;
+				pumpkinMoon = masterModeReloaded ? true : false;
 				snowMoon = false;
 				ServerSideCharacter = false;
 				menuMultiplayer = false;
@@ -36391,20 +_,20 @@
 				netMode = 0;
 				ClearVisualPostProcessEffects();
 				int num11 = 0;
-				num5 = 6;
+				num5 = 7;
 				num4 = 60;
 				array9[num11] = Lang.menu[12].Value;
 				if (selectedMenu == num11) {
 					SoundEngine.PlaySound(10);
 					ClearPendingPlayerSelectCallbacks();
-					menuMode = 1;
+					menuMode = (restartRequired) ? 694204 : 1;
 				}
 
 				num11++;
 				array9[num11] = Lang.menu[13].Value;
 				if (selectedMenu == num11) {
 					SoundEngine.PlaySound(10);
-					menuMode = 12;
+					menuMode = (restartRequired) ? 694205 : 12;
 				}
 
 				num11++;
@@ -36424,6 +_,13 @@
 				}
 
 				num11++;
+				array9[num11] = Language.GetText("Modded.Mods").Value;
+				if (selectedMenu == num11) {
+					SoundEngine.PlaySound(10);
+					menuMode = 694202;
+				}
+
+				num11++;
 				array9[num11] = Lang.menu[14].Value;
 				if (selectedMenu == num11) {
 					SoundEngine.PlaySound(10);
@@ -36431,9 +_,16 @@
 				}
 
 				num11++;
-				array9[num11] = Lang.menu[15].Value;
-				if (selectedMenu == num11)
-					QuitGame();
+				array9[num11] = restartRequired ? Language.GetTextValue("Modded.Reload") : Lang.menu[15].Value;
+				if (selectedMenu == num11) {
+					if (restartRequired) {
+						Reinitialize_AlmostEverything_Needed();
+						restartRequired = false;
+					}
+					else
+						QuitGame();
+				}
+				array6[num11] = restartRequired ? (byte)8 : (byte)0;
 
 				num11++;
 			}
@@ -37032,8 +_,8 @@
 				else if (menuMode == 11) {
 					num2 = 210;
 					num4 = 37;
-					num5 = 8;
+					num5 = 9;
-					array4[num5 - 1] = 8;
+					array4[num5 - 1] = 9;
 					for (int num19 = 0; num19 < num5; num19++) {
 						array7[num19] = 0.75f;
 					}
@@ -37088,6 +_,15 @@
 					}
 
 					num20++;
+					array[num20] = (enabledMods.Count() >= 1) ? false : true;
+					array6[num20] = ((enabledMods.Count() >= 1) ? (byte)0 : (byte)9);
+					array9[num20] = Language.GetTextValue("Modded.ModSettings");
+					if (selectedMenu == num20) {
+						SoundEngine.PlaySound(10);
+						menuMode = 694203;
+					}
+
+					num20++;
 					array9[num20] = Lang.menu[5].Value;
 					if (selectedMenu == num20 || flag5) {
 						flag5 = false;
@@ -38121,6 +_,164 @@
 						netMode = 0;
 					}
 				}
+				else if (menuMode == 694201) {
+					num5 = 2;
+					array9[0] = Language.GetTextValue("Modded.WelcomeMessage");
+					array[0] = true;
+					num2 = 220;
+					num4 = 250;
+					array9[1] = Language.GetTextValue("Modded.Continue");
+					if (selectedMenu == 1) {
+						_showWelcomeMessage = false;
+						SaveSettings();
+						SoundEngine.PlaySound(11);
+						menuMode = 0;
+						netMode = 0;
+					}
+				}
+				else if (menuMode == 694202) {
+					num2 = 210;
+					num4 = 37;
+					num5 = 9;
+					int num20 = 0;
+
+					array4[num5 - 1] = 9;
+					for (int num19 = 1; num19 < num5; num19++) {
+						array7[num19] = 0.75f;
+					}
+
+					array9[num20] = Language.GetTextValue("Modded.ModList");
+					array[num20] = true;
+
+					num20++;
+					array9[num20] = Language.GetTextValue("Modded.StopAsking");
+					array[num20] = true;
+
+					num20++;
+					array9[num20] = Language.GetTextValue("Modded.TerrariaPlus") + (terrariaPlus ? Language.GetTextValue("Modded.Enabled") : Language.GetTextValue("Modded.Disabled"));
+					if (selectedMenu == num20) {
+						SoundEngine.PlaySound(10);
+						terrariaPlus = !terrariaPlus;
+
+						restartRequired = true;
+					}
+
+					num20++;
+					array9[num20] = Language.GetTextValue("Modded.MasterModeReloaded") + (masterModeReloaded ? Language.GetTextValue("Modded.Enabled") : Language.GetTextValue("Modded.Disabled"));
+					if (selectedMenu == num20) {
+						SoundEngine.PlaySound(10);
+						masterModeReloaded = !masterModeReloaded;
+
+						restartRequired = true;
+					}
+
+					num20++;
+					//array9[num20] = "";
+
+					num20++;
+					//array9[num20] = "";
+
+					num20++;
+					//array9[num20] = "";
+
+					num20++;
+					array9[num20] = Lang.menu[5].Value;
+					if (selectedMenu == num20 || flag5) {
+						flag5 = false;
+						SoundEngine.PlaySound(11);
+						menuMode = 0;
+						SaveSettings();
+					}
+
+					num20++;
+					array9[num20] = (restartRequired ? Language.GetTextValue("Modded.RestartRequired") : "");
+					array6[num20] = 3;
+					array[num20] = true;
+				}
+				else if (menuMode == 694203) {
+					num2 = 210;
+					num4 = 37;
+					num5 = 9;
+					int num20 = 0;
+
+					array4[num5 - 1] = 9;
+					for (int num19 = 1; num19 < num5; num19++) {
+						array7[num19] = 0.75f;
+					}
+
+					num20++;
+					array9[num20] = Language.GetTextValue("Modded.TerrariaPlus");
+					array[num20] = true;
+
+					num20++;
+					array9[num20] = Language.GetTextValue("Modded.SlowerMasterModeRarity") + (slowerMasterModeRarity ? Language.GetTextValue("Modded.Enabled") : Language.GetTextValue("Modded.Disabled"));
+					if (selectedMenu == num20) {
+						SoundEngine.PlaySound(10);
+						slowerMasterModeRarity = slowerMasterModeRarity ? false : true;
+
+						restartRequired = true;
+					}
+
+					num20++;
+					array9[num20] = Language.GetTextValue("Modded.FirstFractalRecipe") + (firstFractalRecipe ? Language.GetTextValue("Modded.Enabled") : Language.GetTextValue("Modded.Disabled"));
+					if (selectedMenu == num20) {
+						SoundEngine.PlaySound(10);
+						firstFractalRecipe = firstFractalRecipe ? false : true;
+
+						restartRequired = true;
+					}
+
+					num20++;
+					array9[num20] = Language.GetTextValue("Modded.AccessoryInAnyVanity") + (allAccessoriesInVanitySlots ? Language.GetTextValue("Modded.Enabled") : Language.GetTextValue("Modded.Disabled"));
+					if (selectedMenu == num20) {
+						SoundEngine.PlaySound(10);
+						allAccessoriesInVanitySlots = allAccessoriesInVanitySlots ? false : true;
+
+						restartRequired = true;
+					}
+
+					num20++;
+					//array9[num20] = "";
+
+					num20++;
+					//array9[num20] = "";
+
+					num20++;
+					array9[num20] = Lang.menu[5].Value;
+					if (selectedMenu == num20 || flag5) {
+						flag5 = false;
+						SoundEngine.PlaySound(11);
+						menuMode = 11;
+						SaveSettings();
+					}
+
+					num20++;
+					array9[num20] = (restartRequired ? Language.GetTextValue("Modded.RestartRequired") : "");
+					array6[num20] = 3;
+					array[num20] = true;
+				}
+				else if (menuMode == 694204) {
+					num5 = 2;
+					array9[0] = Language.GetTextValue("Modded.RestartMessage");
+					array[0] = true;
+					num2 = 220;
+					num4 = 250;
+					array9[1] = Language.GetTextValue("Modded.Continue");
+					if (selectedMenu == 1) {
+						menuMode = 1;
+					}
+				}
+				else if (menuMode == 694205) {
+					num5 = 2;
+					array9[0] = Language.GetTextValue("Modded.RestartMessage");
+					array[0] = true;
+					num2 = 220;
+					num4 = 250;
+					array9[1] = Language.GetTextValue("Modded.Continue");
+					if (selectedMenu == 1) {
+						menuMode = 12;
+					}
+				}
 			}
 
 			if (menuMode == 888) {
@@ -38671,6 +_,15 @@
 							case 6:
 								color11 = errorColor;
 								break;
+							case 7:
+								color11 = new Color(DiscoR, DiscoG, DiscoB);
+								break;
+							case 8:
+								color11 = new Color(255, 255, (byte)(Main.YellowtoWhite * 255f), Main.mouseTextColor);
+								break;
+							case 9:
+								color11 = Color.Black;
+								break;
 							default:
 								color11 = color;
 								break;
@@ -38852,10 +_,13 @@
 					if (num107 == 3)
 						num109 = 2;
 
-					Vector2 origin2 = FontAssets.MouseText.Value.MeasureString(versionNumber);
+					Vector2 origin1 = FontAssets.MouseText.Value.MeasureString("Terraria " + versionNumber);
+					spriteBatch.DrawString(FontAssets.MouseText.Value, "Terraria " + versionNumber, new Vector2(origin1.X + (float)num108 + 10f, (float)screenHeight - origin1.Y + (float)num109 - 2f), color12, 0f, origin1, 1f, SpriteEffects.None, 0f);
+
+					Vector2 origin2 = FontAssets.MouseText.Value.MeasureString("tStandalone " + tStandaloneVersion);
 					origin2.X *= 0.5f;
 					origin2.Y *= 0.5f;
-					spriteBatch.DrawString(FontAssets.MouseText.Value, versionNumber, new Vector2(origin2.X + (float)num108 + 10f, (float)screenHeight - origin2.Y + (float)num109 - 2f), color12, 0f, origin2, 1f, SpriteEffects.None, 0f);
+					spriteBatch.DrawString(FontAssets.MouseText.Value, "tStandalone " + tStandaloneVersion, new Vector2(origin2.X + (float)num108 + 10f, (float)screenHeight - origin2.Y + (float)num109 - 2f), color12, 0f, origin2, 1f, SpriteEffects.None, 0f);
 				}
 			}
 
