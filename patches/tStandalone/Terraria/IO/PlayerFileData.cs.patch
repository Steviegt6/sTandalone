--- src/tModLoader/Terraria/IO/PlayerFileData.cs
+++ src/tStandalone/Terraria/IO/PlayerFileData.cs
@@ -2,8 +_,6 @@
 using System.Diagnostics;
 using System.IO;
 using System.Linq;
-using Terraria.ModLoader.Exceptions;
-using Terraria.ModLoader.IO;
 using Terraria.Social;
 using Terraria.Utilities;
 
@@ -15,7 +_,6 @@
 		private TimeSpan _playTime = TimeSpan.Zero;
 		private readonly Stopwatch _timer = new Stopwatch();
 		private bool _isTimerActive;
-		public CustomModDataException customDataFail = null;
 
 		public Player Player {
 			get {
@@ -43,6 +_,8 @@
 			playerFileData._isCloudSave = (SocialAPI.Cloud != null && SocialAPI.Cloud.EnabledByDefault);
 			playerFileData._path = Main.GetPlayerPathFromName(player.name, playerFileData.IsCloudSave);
 			(playerFileData.IsCloudSave ? Main.CloudFavoritesData : Main.LocalFavoriteData).ClearEntry(playerFileData);
+			Main.LocalModInfoData.ClearEntry(playerFileData);
+			Main.CloudModInfoData.ClearEntry(playerFileData);
 			Player.SavePlayer(playerFileData, skipMapSave: true);
 			return playerFileData;
 		}
@@ -60,7 +_,6 @@
 			if (!FileUtilities.MoveToCloud(base.Path, playerPathFromName))
 				return;
 
-			PlayerIO.MoveToCloud(Path, playerPathFromName);
 			string fileName = GetFileName(includeExtension: false);
 			string path = Main.PlayerPath + System.IO.Path.DirectorySeparatorChar + fileName + System.IO.Path.DirectorySeparatorChar;
 			if (Directory.Exists(path)) {
@@ -72,9 +_,11 @@
 			}
 
 			Main.LocalFavoriteData.ClearEntry(this);
+			Main.LocalModInfoData.ClearEntry(this);
 			_isCloudSave = true;
 			_path = playerPathFromName;
 			Main.CloudFavoritesData.SaveFavorite(this);
+			Main.CloudModInfoData.SaveModInfo(this);
 		}
 
 		public override void MoveToLocal() {
@@ -85,21 +_,21 @@
 			if (!FileUtilities.MoveToLocal(base.Path, playerPathFromName))
 				return;
 
-			PlayerIO.MoveToLocal(Path, playerPathFromName);
 			string fileName = GetFileName(includeExtension: false);
 			string mapPath = System.IO.Path.Combine(Main.CloudPlayerPath, fileName);
 			foreach (string item in from path in SocialAPI.Cloud.GetFiles()
-									where path.StartsWith(mapPath, StringComparison.CurrentCultureIgnoreCase)
-									&& (path.EndsWith(".map", StringComparison.CurrentCultureIgnoreCase) || path.EndsWith(".tmap", StringComparison.CurrentCultureIgnoreCase))
+									where path.StartsWith(mapPath, StringComparison.CurrentCultureIgnoreCase) && path.EndsWith(".map", StringComparison.CurrentCultureIgnoreCase)
 									select path) {
 				string localPath = System.IO.Path.Combine(Main.PlayerPath, fileName, FileUtilities.GetFileName(item));
 				FileUtilities.MoveToLocal(item, localPath);
 			}
 
 			Main.CloudFavoritesData.ClearEntry(this);
+			Main.CloudModInfoData.ClearEntry(this);
 			_isCloudSave = false;
 			_path = playerPathFromName;
 			Main.LocalFavoriteData.SaveFavorite(this);
+			Main.LocalModInfoData.SaveModInfo(this);
 		}
 
 		public void UpdatePlayTimer() {
