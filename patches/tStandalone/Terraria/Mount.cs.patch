--- src/tModLoader/Terraria/Mount.cs
+++ src/tStandalone/Terraria/Mount.cs
@@ -10,7 +_,6 @@
 using Terraria.GameContent.Drawing;
 using Terraria.Graphics.Shaders;
 using Terraria.ID;
-using Terraria.ModLoader;
 
 namespace Terraria
 {
@@ -77,9 +_,8 @@
 			}
 		}
 
-		public class MountData
+		private class MountData
 		{
-			public ModMountData modMountData {get;set;}
 			public Asset<Texture2D> backTexture = Asset<Texture2D>.Empty;
 			public Asset<Texture2D> backTextureGlow = Asset<Texture2D>.Empty;
 			public Asset<Texture2D> backTextureExtra = Asset<Texture2D>.Empty;
@@ -156,7 +_,7 @@
 		public const int DrawBackExtra = 1;
 		public const int DrawFront = 2;
 		public const int DrawFrontExtra = 3;
-		public static MountData[] mounts;
+		private static MountData[] mounts;
 		private static Vector2[] scutlixEyePositions;
 		private static Vector2 scutlixTextureSize;
 		public const int scutlixBaseDamage = 50;
@@ -170,28 +_,28 @@
 		public static int drillBeamCooldownMax = 1;
 		public const float maxDrillLength = 48f;
 		private static Vector2 santankTextureSize;
-		public MountData _data;
+		private MountData _data;
-		public int _type;
+		private int _type;
-		public bool _flipDraw;
+		private bool _flipDraw;
-		public int _frame;
+		private int _frame;
-		public float _frameCounter;
+		private float _frameCounter;
-		public int _frameExtra;
+		private int _frameExtra;
-		public float _frameExtraCounter;
+		private float _frameExtraCounter;
-		public int _frameState;
+		private int _frameState;
-		public int _flyTime;
+		private int _flyTime;
-		public int _idleTime;
+		private int _idleTime;
-		public int _idleTimeNext;
+		private int _idleTimeNext;
-		public float _fatigue;
+		private float _fatigue;
-		public float _fatigueMax;
+		private float _fatigueMax;
-		public bool _abilityCharging;
+		private bool _abilityCharging;
-		public int _abilityCharge;
+		private int _abilityCharge;
-		public int _abilityCooldown;
+		private int _abilityCooldown;
-		public int _abilityDuration;
+		private int _abilityDuration;
-		public bool _abilityActive;
+		private bool _abilityActive;
-		public bool _aiming;
+		private bool _aiming;
 		public List<DrillDebugDraw> _debugDraw;
-		public object _mountSpecificData;
+		private object _mountSpecificData;
-		public bool _active;
+		private bool _active;
 		private MountDelegatesData _defaultDelegatesData = new MountDelegatesData();
 
 		public bool Active => _active;
@@ -2002,13 +_,13 @@
 		}
 
 		public static int GetHeightBoost(int MountType) {
-			if (MountType <= -1 || MountType >= mounts.Length)
+			if (MountType <= -1 || MountType >= MountID.Count)
 				return 0;
 
 			return mounts[MountType].heightBoost;
 		}
 
-		public int JumpHeight(Player player, float xVelocity) {
+		public int JumpHeight(float xVelocity) {
 			int num = _data.jumpHeight;
 			switch (_type) {
 				case 0:
@@ -2024,11 +_,10 @@
 					break;
 			}
 
-			MountLoader.JumpHeight(player, _data, ref num, xVelocity);
 			return num;
 		}
 
-		public float JumpSpeed(Player player, float xVelocity) {
+		public float JumpSpeed(float xVelocity) {
 			float num = _data.jumpSpeed;
 			switch (_type) {
 				case 0:
@@ -2042,7 +_,6 @@
 					break;
 			}
 
-			MountLoader.JumpSpeed(player, _data, ref num, xVelocity);
 			return num;
 		}
 
@@ -2481,9 +_,6 @@
 		private Vector2 GetWitchBroomTrinketOriginOffset(Player player) => new Vector2(27 * player.direction, 5f);
 
 		public void UpdateFrame(Player mountedPlayer, int state, Vector2 velocity) {
-			if (!MountLoader.UpdateFrame(mountedPlayer, state, velocity))
-				return;
-
 			if (_frameState != state) {
 				_frameState = state;
 				_frameCounter = 0f;
@@ -3212,7 +_,7 @@
 
 			Tile tileSafely = Framing.GetTileSafely(p.X, p.Y);
 			if (WorldGen.SolidTile(p)) {
-				int num = WorldGen.KillTile_GetTileDustAmount(true, tileSafely, p.X, p.Y);
+				int num = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely);
 				if (num > 1)
 					num = 1;
 
@@ -3321,7 +_,6 @@
 
 		public void UpdateEffects(Player mountedPlayer) {
 			mountedPlayer.autoJump = AutoJump;
-			MountLoader.UpdateEffects(mountedPlayer);
 			switch (_type) {
 				case 13:
 				case 15:
@@ -3490,13 +_,10 @@
 						else
 							Lighting.AddLight(mountedPlayer.Center + Vector2.UnitX * mountedPlayer.direction * 20f, vector7.X, vector7.Y, vector7.Z);
 
-						mountedPlayer.allDamage += 0.15f;
-						/*
 						mountedPlayer.meleeDamage += 0.15f;
 						mountedPlayer.rangedDamage += 0.15f;
 						mountedPlayer.magicDamage += 0.15f;
 						mountedPlayer.minionDamage += 0.15f;
-						*/
 					}
 					if (mountedPlayer.statLife <= mountedPlayer.statLifeMax2 / 2)
 						mountedPlayer.MountFishronSpecialCounter = 60f;
@@ -3671,7 +_,7 @@
 			if (_type == -1)
 				return;
 
-			for (int i = 0; i < Player.MaxBuffs; i++) {
+			for (int i = 0; i < 22; i++) {
 				if (mountedPlayer.buffType[i] == _data.buff || (Cart && mountedPlayer.buffType[i] == _data.extraBuff))
 					return;
 			}
@@ -3725,7 +_,6 @@
 
 		public bool AimAbility(Player mountedPlayer, Vector2 mousePosition) {
 			_aiming = true;
-			MountLoader.AimAbility(this, mountedPlayer, mousePosition);
 			switch (_type) {
 				case 9: {
 						int frameExtra = _frameExtra;
@@ -4168,7 +_,6 @@
 					break;
 			}
 
-			flag2 = !MountLoader.Draw(this, playerDrawData, drawType, drawPlayer, ref texture2D, ref texture2D2, ref Position, ref value, ref drawColor, ref color, ref num8, ref spriteEffects, ref origin, ref scale, shadow);
 			if (!flag2) {
 				item = new DrawData(texture2D, Position, value, drawColor, num8, origin, scale, spriteEffects, 0);
 				item.shader = currentShader;
@@ -4307,8 +_,6 @@
 				bool cart = Cart;
 				_active = false;
 				mountedPlayer.ClearBuff(_data.buff);
-				bool skipDust = false;
-				MountLoader.Dismount(this, mountedPlayer, ref skipDust);
 				_mountSpecificData = null;
 				_ = _type;
 				if (cart) {
@@ -4319,8 +_,7 @@
 
 				mountedPlayer.fullRotation = 0f;
 				mountedPlayer.fullRotationOrigin = Vector2.Zero;
-				if (!skipDust)
-					DoSpawnDust(mountedPlayer, isDismounting: true);
+				DoSpawnDust(mountedPlayer, isDismounting: true);
 				Reset();
 				mountedPlayer.position.Y += mountedPlayer.height;
 				mountedPlayer.height = 42;
@@ -4331,7 +_,7 @@
 		}
 
 		public void SetMount(int m, Player mountedPlayer, bool faceLeft = false) {
-			if (_type == m || m <= -1 || m >= mounts.Length || (m == 5 && mountedPlayer.wet))
+			if (_type == m || m <= -1 || m >= MountID.Count || (m == 5 && mountedPlayer.wet))
 				return;
 
 			if (_active) {
@@ -4390,10 +_,7 @@
 			if (_type == 35)
 				_mountSpecificData = new ExtraFrameMountData();
 
-			bool skipDust = false;
-			MountLoader.SetMount(this, mountedPlayer, ref skipDust);
-			if (!skipDust)
-				DoSpawnDust(mountedPlayer, isDismounting: false);
+			DoSpawnDust(mountedPlayer, isDismounting: false);
 			if (mountedPlayer.whoAmI == Main.myPlayer)
 				NetMessage.SendData(13, -1, -1, null, mountedPlayer.whoAmI);
 		}
